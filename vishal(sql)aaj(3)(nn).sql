
use `e commarce`;
-- 1. List all unique cities where customers are located
SELECT DISTINCT customer_city
FROM customers;

-- 2. Count the number of orders placed in 2017
SELECT COUNT(*) AS orders_2017
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2017;

-- 3. Find the total sales per category
SELECT p.product_category, SUM(oi.price) AS total_sales
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_category;

-- 4. Calculate the percentage of orders that were paid in installments
SELECT 
    (COUNT(DISTINCT CASE WHEN payment_installments >= 1 THEN order_id END) / 
     COUNT(DISTINCT order_id)) * 100 AS percentage_paid_in_installments
FROM payments;

-- 5. Count the number of customers from each state
SELECT customer_state, COUNT(*) AS customer_count
FROM customers
GROUP BY customer_state;

-- 1. Calculate the number of orders per month in 2018
SELECT MONTH(order_purchase_timestamp) AS month, COUNT(*) AS orders_per_month
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2018
GROUP BY MONTH(order_purchase_timestamp)
ORDER BY month;

-- 2. Find the average number of products per order, grouped by customer city
  SELECT 
    c.customer_city,
    AVG(order_item_count) AS avg_products_per_order
FROM (
    SELECT 
        o.customer_id, 
        COUNT(oi.product_id) AS order_item_count
    FROM orders o
    LEFT JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY o.customer_id, o.order_id
) AS order_counts
JOIN customers c ON order_counts.customer_id = c.customer_id
GROUP BY c.customer_city
ORDER BY avg_products_per_order DESC;
-- 4. Identify the correlation between product price and the number of times a product has been purchased
SELECT 
    p.product_category AS Category, 
    COUNT(oi.product_id) AS order_count, 
    AVG(oi.price) AS average_price
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_category
ORDER BY order_count DESC;


-- 5. Calculate the total revenue generated by each seller, and rank them by revenue
SELECT s.seller_id, SUM(oi.price) AS total_revenue
FROM order_items oi
JOIN sellers s ON oi.seller_id = s.seller_id
GROUP BY s.seller_id
ORDER BY total_revenue DESC;


USE `e commarce`;

-- 1. Calculate the moving average of order values for each customer over their order history
SELECT 
    o.customer_id,
    o.order_purchase_timestamp,
    o.order_id,
    p.payment_value,
    AVG(p.payment_value) OVER (PARTITION BY o.customer_id ORDER BY o.order_purchase_timestamp ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS moving_avg_order_value
FROM orders o
JOIN payments p ON o.order_id = p.order_id;



-- 2. Calculate the cumulative sales per month for each year
SELECT 
    YEAR(o.order_purchase_timestamp) AS year,
    MONTH(o.order_purchase_timestamp) AS month,
    SUM(p.payment_value) AS total_sales,
    SUM(SUM(p.payment_value)) OVER (PARTITION BY YEAR(o.order_purchase_timestamp) ORDER BY MONTH(o.order_purchase_timestamp)) AS cumulative_sales
FROM orders o
JOIN payments p ON o.order_id = p.order_id
GROUP BY year, month
ORDER BY year, month;

 -- 3. Calculate the year-over-year growth rate of total sales
WITH total_sales_per_year AS (
    SELECT 
        YEAR(o.order_purchase_timestamp) AS year,
        SUM(p.payment_value) AS total_sales
    FROM orders o
    JOIN payments p ON o.order_id = p.order_id
    GROUP BY year
)
SELECT 
    year,
    total_sales,
    LAG(total_sales) OVER (ORDER BY year) AS previous_year_sales,
    (total_sales - LAG(total_sales) OVER (ORDER BY year)) / LAG(total_sales) OVER (ORDER BY year) * 100 AS yoy_growth_rate
FROM total_sales_per_year
ORDER BY year;

-- 4. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase
WITH first_purchase AS (
    SELECT 
        customer_id,
        MIN(order_purchase_timestamp) AS first_purchase_date
    FROM orders
    GROUP BY customer_id
),
repeat_purchases AS (
    SELECT 
        o.customer_id
    FROM orders o
    JOIN first_purchase fp ON o.customer_id = fp.customer_id
    WHERE o.order_purchase_timestamp > fp.first_purchase_date
      AND o.order_purchase_timestamp <= DATE_ADD(fp.first_purchase_date, INTERVAL 6 MONTH)
    GROUP BY o.customer_id
),
total_customers AS (
    SELECT COUNT(DISTINCT customer_id) AS total_count FROM first_purchase
),
retained_customers AS (
    SELECT COUNT(DISTINCT customer_id) AS retained_count FROM repeat_purchases
)
SELECT 
    (retained_customers.retained_count * 100.0 / total_customers.total_count) AS retention_rate
FROM total_customers, retained_customers;


-- 5. Identify the top 3 customers who spent the most money in each year
SELECT 
    year,
    customer_id,
    total_spent
FROM (
    SELECT 
        YEAR(o.order_purchase_timestamp) AS year,
        o.customer_id,
        SUM(p.payment_value) AS total_spent,
        ROW_NUMBER() OVER (PARTITION BY YEAR(o.order_purchase_timestamp) ORDER BY SUM(p.payment_value) DESC) AS rank_value
    FROM orders o
    JOIN payments p ON o.order_id = p.order_id
    GROUP BY YEAR(o.order_purchase_timestamp), o.customer_id
) AS ranked_customers
WHERE rank_value <= 3
ORDER BY year, rank_value;


